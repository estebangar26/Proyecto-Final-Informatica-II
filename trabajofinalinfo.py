# -*- coding: utf-8 -*-
"""trabajofinalinfo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1auIBLdroXi1kS4k-ELaN3UTaI5GNzgok
"""

#modelo

#Melissa

import os
import numpy as np
import pydicom
import nibabel as nib
from datetime import datetime

class ProcesadorDICOM:
    def __init__(self):
        self.volumen = None
        self.ruta_guardado_nifti = None

    def cargar_carpeta_dicom(self, carpeta):
        archivos = [pydicom.dcmread(os.path.join(carpeta, f)) for f in sorted(os.listdir(carpeta))]
        slices = sorted(archivos, key=lambda x: float(x.InstanceNumber))
        self.volumen = np.stack([s.pixel_array for s in slices], axis=-1)

        paciente = archivos[0]
        datos = {
            'Nombre': getattr(paciente, 'PatientName', 'Desconocido'),
            'ID': getattr(paciente, 'PatientID', 'Desconocido'),
            'Edad': getattr(paciente, 'PatientAge', 'Desconocido'),
            'Fecha': datetime.now().strftime("%Y-%m-%d %H:%M"),
            'Ruta Carpeta': carpeta
        }
        return datos, self.volumen

    def convertir_a_nifti(self, carpeta, nombre="imagen_convertida.nii"):
        if self.volumen is None:
            self.cargar_carpeta_dicom(carpeta)
        img_nifti = nib.Nifti1Image(self.volumen.astype(np.int16), affine=np.eye(4))
        self.ruta_guardado_nifti = os.path.join(carpeta, nombre)
        nib.save(img_nifti, self.ruta_guardado_nifti)
        return self.ruta_guardado_nifti


#####################################################################
#modelo/senales.py
from scipy.io import loadmat
import numpy as np

class ProcesadorMAT:
    def __init__(self):
        self.datos = {}
        self.nombre_archivo = ""

    def cargar_archivo(self, ruta):
        self.datos = loadmat(ruta)
        self.nombre_archivo = ruta
        claves = [k for k in self.datos.keys() if not k.startswith("__")]
        return claves

    def obtener_array(self, clave):
        array = self.datos.get(clave)
        if isinstance(array, np.ndarray) and array.ndim >= 1:
            return array
        else:
            return None

    def calcular_promedio(self, array):
        return np.mean(array, axis=1)

#vista

#Melissa
#procesamiento_dicom.py
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton, QLabel, QFileDialog, QSlider, QHBoxLayout
from PyQt5.QtCore import Qt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as Canvas
from matplotlib.figure import Figure
from modelo.imagenes import ProcesadorDICOM

class DICOMViewer(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Procesamiento DICOM/NIfTI")
        self.processor = ProcesadorDICOM()
        self.volumen = None
        self.slices = {'axial': 0, 'coronal': 0, 'sagital': 0}
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        self.boton_cargar = QPushButton("Cargar Carpeta DICOM")
        self.boton_cargar.clicked.connect(self.cargar_dicom)
        layout.addWidget(self.boton_cargar)

        self.fig = Figure(figsize=(10, 3))
        self.canvas = Canvas(self.fig)
        layout.addWidget(self.canvas)

        self.sliders = {}
        for plano in ['axial', 'coronal', 'sagital']:
            slider = QSlider(Qt.Horizontal)
            slider.valueChanged.connect(self.actualizar_vista)
            self.sliders[plano] = slider
            layout.addWidget(QLabel(f"Plano {plano.capitalize()}"))
            layout.addWidget(slider)

        self.boton_convertir = QPushButton("Convertir a NIfTI")
        self.boton_convertir.clicked.connect(self.convertir_nifti)
        layout.addWidget(self.boton_convertir)

        self.setLayout(layout)

    def cargar_dicom(self):
        carpeta = QFileDialog.getExistingDirectory(self, "Seleccionar carpeta DICOM")
        if carpeta:
            datos, self.volumen = self.processor.cargar_carpeta_dicom(carpeta)
            print("Metadatos del paciente:", datos)
            z, y, x = self.volumen.shape
            self.sliders['axial'].setMaximum(z - 1)
            self.sliders['coronal'].setMaximum(y - 1)
            self.sliders['sagital'].setMaximum(x - 1)
            self.sliders['axial'].setValue(z // 2)
            self.sliders['coronal'].setValue(y // 2)
            self.sliders['sagital'].setValue(x // 2)
            self.actualizar_vista()

    def actualizar_vista(self):
        if self.volumen is None:
            return
        self.fig.clf()
        plano_axial = self.sliders['axial'].value()
        plano_coronal = self.sliders['coronal'].value()
        plano_sagital = self.sliders['sagital'].value()

        axs = self.fig.subplots(1, 3)
        axs[0].imshow(self.volumen[plano_axial, :, :], cmap='gray')
        axs[0].set_title(f"Axial {plano_axial}")
        axs[1].imshow(self.volumen[:, plano_coronal, :], cmap='gray')
        axs[1].set_title(f"Coronal {plano_coronal}")
        axs[2].imshow(self.volumen[:, :, plano_sagital], cmap='gray')
        axs[2].set_title(f"Sagital {plano_sagital}")
        self.canvas.draw()

    def convertir_nifti(self):
        ruta = self.processor.convertir_a_nifti(".".join(__file__.split("/")[:-2]) + "/recursos/ejemplos")
        print(f"NIfTI guardado en: {ruta}")


#menu_imagees.py
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton
from vista.procesamiento_dicom import DICOMViewer

class MenuImagenWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Menú Experto en Imágenes")
        layout = QVBoxLayout()
        btn_dicom = QPushButton("Procesar DICOM/NIfTI")
        btn_dicom.clicked.connect(self.abrir_dicom)
        layout.addWidget(btn_dicom)
        self.setLayout(layout)

    def abrir_dicom(self):
        self.viewer = DICOMViewer()
        self.viewer.show()

##############################################################################################
#procesamiento_mat.py

from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QComboBox, QFileDialog, QLineEdit, QMessageBox
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as Canvas
from matplotlib.figure import Figure
from modelo.senales import ProcesadorMAT

class MatViewer(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Procesador de Señales - Archivo .mat")
        self.processor = ProcesadorMAT()
        self.array_actual = None
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        self.btn_cargar = QPushButton("Cargar archivo .mat")
        self.btn_cargar.clicked.connect(self.cargar_archivo)
        layout.addWidget(self.btn_cargar)

        self.combo_claves = QComboBox()
        self.combo_claves.currentTextChanged.connect(self.seleccionar_clave)
        layout.addWidget(QLabel("Selecciona una señal"))
        layout.addWidget(self.combo_claves)

        self.input_inicio = QLineEdit()
        self.input_inicio.setPlaceholderText("Canal inicio")
        self.input_fin = QLineEdit()
        self.input_fin.setPlaceholderText("Canal fin")
        layout.addWidget(self.input_inicio)
        layout.addWidget(self.input_fin)

        self.btn_graficar = QPushButton("Graficar canal / segmento")
        self.btn_graficar.clicked.connect(self.graficar_segmento)
        layout.addWidget(self.btn_graficar)

        self.btn_promedio = QPushButton("Promedio eje 1")
        self.btn_promedio.clicked.connect(self.graficar_promedio)
        layout.addWidget(self.btn_promedio)

        self.fig = Figure()
        self.canvas = Canvas(self.fig)
        layout.addWidget(self.canvas)

        self.setLayout(layout)

    def cargar_archivo(self):
        ruta, _ = QFileDialog.getOpenFileName(self, "Seleccionar archivo .mat", "", "Archivos .mat (*.mat)")
        if ruta:
            claves = self.processor.cargar_archivo(ruta)
            self.combo_claves.clear()
            self.combo_claves.addItems(claves)

    def seleccionar_clave(self, clave):
        array = self.processor.obtener_array(clave)
        if array is None:
            QMessageBox.warning(self, "Error", "No es un arreglo válido. Intenta con otra clave.")
            self.array_actual = None
        else:
            self.array_actual = array
            self.graficar_todo()

    def graficar_todo(self):
        if self.array_actual is None:
            return
        self.fig.clf()
        ax = self.fig.add_subplot(111)
        ax.plot(self.array_actual.T)
        ax.set_title("Todas las señales")
        ax.set_xlabel("Tiempo")
        ax.set_ylabel("Amplitud")
        self.canvas.draw()

    def graficar_segmento(self):
        if self.array_actual is None:
            return
        try:
            inicio = int(self.input_inicio.text())
            fin = int(self.input_fin.text())
            self.fig.clf()
            ax = self.fig.add_subplot(111)
            ax.plot(self.array_actual[inicio:fin].T)
            ax.set_title(f"Canales {inicio} a {fin}")
            ax.set_xlabel("Tiempo")
            ax.set_ylabel("Amplitud")
            self.canvas.draw()
        except Exception as e:
            QMessageBox.warning(self, "Error", f"Parámetros inválidos: {e}")

    def graficar_promedio(self):
        if self.array_actual is None:
            return
        promedio = self.processor.calcular_promedio(self.array_actual)
        self.fig.clf()
        ax = self.fig.add_subplot(111)
        ax.stem(promedio)
        ax.set_title("Promedio eje 1")
        ax.set_xlabel("Canal")
        ax.set_ylabel("Promedio")
        self.canvas.draw()

#menu_senal.py
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton
from vista.procesamiento_mat import MatViewer

class MenuSenalWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Menú Experto en Señales")
        layout = QVBoxLayout()
        btn_mat = QPushButton("Procesar archivo .mat")
        btn_mat.clicked.connect(self.abrir_mat)
        layout.addWidget(btn_mat)
        self.setLayout(layout)

    def abrir_mat(self):
        self.viewer = MatViewer()
        self.viewer.show()

#controlador